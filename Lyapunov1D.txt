

public class Lyapunov1D extends GridModel implements ModelListener{

    private GridModel model;
    private double[][] prev0, prev1;
    private final double[][] totalLyap;
    private int n = 0;
    private final double[][] x;
    
    public Lyapunov1D(GridModel m){
        super(null, m.width, m.height, m.xmin, 0.0, m.xmax, 2.0);
        this.model = m;
        prev1 = new double[m.width][m.height];
        prev0 = new double[m.width][m.height];
        totalLyap = new double[m.width][m.height];
        x = new double[m.width][m.height];
        for(int i = 0; i < model.width; i++)  
            for(int j = 0; j< model.height; j++)
                x[i][j] = xDouble.transf(i);
    }
    
    public void dataChanged(){
        final double[][] current = model.getYData();
        if(n >= 2){            
            for(int i = 0; i < model.width; i++)
                for(int j = 0; j < model.height; j++)
                    totalLyap[i][j] += Math.log(Math.abs( (prev1[i][j] - prev0[i][j]) /
                                                          (prev0[i][j] = current[i][j]) ));
        }
        push(current);
    }
    
    private void push(double[][] data){
        double[][] recycle = prev1;
        prev1 = prev0;
        prev0 = recycle;
        for(int i = 0; i < data.length; i++)
            for(int j = 0; j < data[i].length; j++)
                prev0[i][j] = data[i][j];
        n++;
    }
    
    public String toString(){
        return getClass().getName() + ": " + model;
    }
}